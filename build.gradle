buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '0.0.2'
group = 'rickaym.pyforge' // http://maven.apache.org/guides/mini/guide-naming-conventions.html

java.toolchain.languageVersion = JavaLanguageVersion.of(14) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.16.5'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                pyforge {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                pyforge {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'pyforge', '--all',
                    '--existing', file('src/main/resources/').toString(),
                    '--existing', file('src/generated/resources/').toString(),
                    '--output', file('src/generated/resources/')
            mods {
                pyforge {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

sourceSets.main.java.srcDirs = ['src/main/java']

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.42'

    implementation 'org.python:jython-standalone:2.7.2'
}

tasks.register('runTest', JavaExec) {
    mainClass.set('test.Main')
    classpath = sourceSets.main.runtimeClasspath
}

jar {
    exclude('**/test/**')

    manifest {
        attributes([
            "Specification-Title": "Mod Language Provider",
            "Specification-Vendor": "Forge",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": "pyforge",
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Rickaym",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "FMLModType": "LANGPROVIDER"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
